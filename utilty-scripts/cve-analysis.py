import re
import time

from bs4 import BeautifulSoup
import json
import requests
import os

BASE_URL = "https://mvnrepository.com/artifact"
# mvn repository blocks queries without user agent defined
HEADERS = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:109.0) Gecko/20100101 Firefox/119.0"}

response_cache = {}

class NVD_Entry:
    def __init__(self, _name, _description, _cpe, _cvss_version, _cvss_score, _cwe):
        self.name = _name
        self.description = _description
        self.cpe = _cpe
        self.cvss_score = _cvss_score
        self.cvss_version = _cvss_version
        self.cwe = _cwe


def get_versions(url: str) -> list:
    versions = []
    page = requests.get(url, headers=HEADERS)
    soup = BeautifulSoup(page.content, 'html.parser')
    for item in soup.find_all(attrs={"class": "vbtn release"}):
        versions.append(item.text)
    for item in soup.find_all(attrs={"class": "vbtn release candidate"}):
        versions.append(item.text)
    return versions


def get_cves(url: str) -> list:
    cves = []
    page = requests.get(url, headers=HEADERS)
    soup = BeautifulSoup(page.content, 'html.parser')

    for item in soup.find_all(attrs={"class" : "vuln"}):
        if not "CVE" in item.text:
            continue
        direct_vuln = True
        i = item.parent.previous_sibling

        while i is not None:
            if i.text and "from dependencies" in i.text:
                direct_vuln = False
                break
            i = i.previous_sibling
        if direct_vuln:
            cves.append(item.text)

    return cves


def get_nvd_cve(cve: str) -> NVD_Entry:
        if cve in response_cache:
            return response_cache[cve]

        response = requests.get(f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve}")
        while response.status_code >= 400:
            time.sleep(2)
            response = requests.get(f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve}")

        vuln = response.json()["vulnerabilities"][0]["cve"]

        if vuln["vulnStatus"] == "Rejected":
            return None

        cvss = vuln["metrics"][list(vuln["metrics"].keys())[0]][0]["cvssData"]
        cvss_version = cvss["version"]
        cvss_score = cvss["baseScore"]
        cwes = []

        for cwe in vuln["weaknesses"][0]["description"]:
            cwes.append(cwe["value"])
        desc = ""

        for description in vuln["descriptions"]:
            if description["lang"] == "en":
                desc = description["value"]
                break

        cpes = []
        for conf in vuln["configurations"]:
            for node in conf["nodes"]:
                for cpe_match in node["cpeMatch"]:
                    if cpe_match["vulnerable"]:
                        cpes.append(cpe_match["criteria"])

        response_cache[cve] = NVD_Entry(cve, desc, cpes, cvss_version, cvss_score, cwes)
        return response_cache[cve]


def is_serialization_keyword(text: str) -> bool:
    return re.search("(seriali[sz]e)|(seriali[sz]ation)|(marshall)", text) is not None


with open(os.path.join("..", "data", "maven-urls", "maven-url_flat.json"), "r") as file:
    urls = json.loads(file.read())


payloads_dir = os.path.join("..", "payloads")

for data_file in os.listdir(payloads_dir):

    file_path = os.path.join(payloads_dir, data_file)

    if not os.path.isfile(file_path):
        continue

    with open(file_path, "r") as file:
        data = json.loads(file.read())

    print(f"----- {file_path} -----")

    # retrieve relevant urls:
    dep_urls = []
    for dependency in data:

        d_url = dependency.replace("commons-collections4", "commons-collections")

        if dependency == "_jdk":
            continue
        if not urls[d_url]:
            print(f"[Error] Dependency url for: {dependency} not found")
            continue

        deserialization_cves = []
        non_deserialization_cves = []

        if isinstance(urls[d_url], str):
            sub_urls = [urls[d_url]]
        else:
            sub_urls = urls[d_url]

        for url in sub_urls:

            version_list = get_versions(f"{BASE_URL}/{url}")
            for version in data[dependency]:
                if version not in version_list:
                    continue

                version_cves = get_cves(f"{BASE_URL}/{url}/{version}")
                if len(version_cves) > 0:
                    for cve in version_cves:

                        cve_info = get_nvd_cve(cve)
                        if cve_info is None:
                            continue

                        if is_serialization_keyword(cve_info.description) or "CWE-502" in cve_info.cwe:
                            if not cve in deserialization_cves: deserialization_cves.append(cve_info.name)
                        else:
                            if not cve in non_deserialization_cves: non_deserialization_cves.append(cve_info.name)
                else:
                    print(f"unreported {dependency} {version}")

        print(f"{dependency}:")
        print(f"Deserialization cves:")
        print(deserialization_cves)
        print("Nondeser cves:")
        print(non_deserialization_cves)
